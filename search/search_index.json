{"config":{"lang":["nl"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Git, GitHub gebruikersgids @HOGENT","text":"<p>In deze gids willen we alle info verzamelen die je nodig hebt om in de opleiding aan de slag te gaan en effectief gebruik te kunnen maken van Git en GitHub.</p> <p>Vind je een onduidelijkheid of wil je een verbetering voorstellen? Aarzel niet om een issue aan te maken of een pull request te sturen op onze GitHub repo.</p> <p>Hieronder vind je een opsomming van onderwerpen die we willen behandelen, onderverdeeld volgens het semester binnen de opleiding waar je het (normaal) zal tegenkomen.</p>"},{"location":"#semester-1-mt1-semester-1","title":"Semester 1 (MT1, semester 1)","text":"<ul> <li>Installatie en configuratie</li> <li>Een GitHub-account aanmaken</li> <li>Read-only gebruik van een repository</li> </ul>"},{"location":"#semester-2-mt1-semester-2","title":"Semester 2 (MT1, semester 2)","text":"<ul> <li>SSH-sleutel instellen</li> <li>Repository clonen</li> <li>Wjzigingen binnenhalen</li> </ul>"},{"location":"#semester-3-mt2-semester-1","title":"Semester 3 (MT2, semester 1)","text":"<ul> <li>Merge vs rebase</li> </ul>"},{"location":"#semester-4-mt2-semester-2","title":"Semester 4 (MT2, semester 2)","text":""},{"location":"#semester-5-mt2-semester-3","title":"Semester 5 (MT2, semester 3)","text":""},{"location":"#andere-onderwerpen","title":"Andere onderwerpen","text":""},{"location":"achtergrondinfo/","title":"Achtergrondinfo","text":""},{"location":"achtergrondinfo/#online-bronnen-tutorials-enz","title":"Online bronnen, tutorials, enz.","text":"<ul> <li>GitHub Minesweeper: Learn a professional Git workflow with a bot as your teammate.</li> <li>Oh my Git: An open-source game about learning Git.</li> <li>Learn Git Branching: Master the concept of Git branching by visualizing, playing, and completing specific tasks.</li> <li>GitHub Skills: Learn how to use GitHub with interactive courses designed for beginners and experts.</li> <li>Gitkraken Learn Git: video tutorials, guides, cheat sheets, etc.</li> </ul>"},{"location":"achtergrondinfo/#e-boeken","title":"(E-)Boeken","text":"<ul> <li>Allgeier, B. and Karlitschek, F. Learn Version Control with Git</li> <li>Abildskov, J. (2020) Practical Git: Confident Git Through Practice. Apress. https://link.springer.com/book/10.1007/978-1-4842-6270-2</li> <li>Tsitoara, M. (2024) Beginning Git and GitHub: Version Control, Project Management and Teamwork for the New Developer. Apress https://link.springer.com/book/10.1007/979-8-8688-0215-7</li> </ul> <p>(Opm. via de links naar Springer kan je de boeken gratis downloaden als je deze op de campus aanklikt of thuis met VPN of via Academic Software.)</p>"},{"location":"github-account/","title":"Een GitHub-account aanmaken","text":"<p>Voor de vele opdrachten in verschillende vakken van de opleiding zal je een GitHub-account nodig hebben. Je kan een account aanmaken op https://github.com. Daarbij is het belangrijk om volgende zaken in acht te nemen:</p> <ul> <li>Kies een gebruikersnaam die professioneel oogt.<ul> <li>Sommige studenten gebruiken \"HOGENT\" in hun gebruikersnaam, maar dit is niet nodig en zo kan je deze gebruikersnaam ook niet meer gebruiken nadat je afgestudeerd bent.</li> </ul> </li> <li>Vul je echte naam in bij je profiel zodat lectoren en begeleiders je gebruikersnaam kunnen koppelen aan je identiteit.</li> <li>Je kan meerdere emailadressen koppelen aan een GitHub-account. Koppel op zijn minst je HOGENT-emailadres (met de extensie <code>@student.hogent.be</code>) aan je account. Dit is nodig om jouw bijdragen aan een teamopdracht te kunnen identificeren en om toegang te krijgen tot bepaalde commerci\u00eble features van GitHub (zie verder). Eventueel kan je ook je primaire persoonlijke emailadres koppelen zodat je nog toegang hebt tot je account na je afstuderen.</li> </ul> <p>Als student aan HOGENT kan je aanspraak maken op het GitHub Student Developer Pack. Dit is nodig om gebruik te kunnen maken van bepaalde commerci\u00eble features van GitHub, zoals private repositories. Volg de link naar de website en klik door op de groene knoppen \"Sign up for Student Developer Pack\" &gt; \"Get Student benefits\". Lees vervolgens aandachtig de instructies! Het proces om goedkeuring te krijgen kan enkele dagen duren, maar daarna heb je zolang je student bent toegang tot de voordelen.</p>"},{"location":"installatie-config/","title":"Git installeren en configureren","text":""},{"location":"installatie-config/#installatie","title":"Installatie","text":"<p>We raden aan om een package manager te gebruiken voor de installatie van software, ook op Windows (Winget) of macOS (Homebrew).</p> <p>Om met Git te kunnen werken heb je op zijn minst de Git CLI client nodig. Er bestaan ook verschillende GUI clients en daar bevelen we Gitkraken aan. Gitkraken is een commerci\u00eble tool (weliswaar met een gratis basisversie), maar verderop vind je instructies voor gratis toegang.</p> WindowsmacOSLinuxRedHat/Fedora/SuSE <p>Open Windows Terminal met Administrator-rechten en voer volgende commando's uit:</p> <pre><code>&gt; winget install Git.Git\n&gt; winget install Axosoft.GitKraken\n</code></pre> <p>Als je toch verkiest om Winget niet te gebruiken, dan kan je de software downloaden via de website: https://git-scm.com en https://www.gitkraken.com.</p> <p>Open een terminal en voer volgende commando's uit:</p> <pre><code>$ brew install git\n$ brew install --cask gitkraken\n</code></pre> <p>Open een terminal en voer het volgende commando uit:</p> <pre><code>$ sudo apt install git\n</code></pre> <p>Gitkraken zit niet in de default repositories van de meeste Linux-distributies. Je kan het downloaden van de website als .deb: https://www.gitkraken.com/download. Vervolgens kan je het installeren met:</p> <pre><code>$ sudo apt install ./gitkraken-amd64.deb\n</code></pre> <p>Open een terminal en voer het volgende commando uit:</p> <pre><code>sudo dnf install git\n</code></pre> <p>Gitkraken zit niet in de default repositories van de meeste Linux-distributies. Je kan het downloaden van de website als .rpm: https://www.gitkraken.com/download. Vervolgens kan je het installeren met:</p> <pre><code>$ sudo dnf install ./gitkraken-amd64.rpm\n</code></pre>"},{"location":"installatie-config/#basisconfiguratie","title":"Basisconfiguratie","text":"<p>Op elk toestel waar je gebruik maakt van Git (later ook binnen virtuele machines!) moet je een aantal basisinstellingen configureren. Open een terminal en voer volgende commando's uit (vervang de placeholders in hoofdletters door je eigen gegevens):</p> <pre><code>&gt; git config --global user.name \"VOORNAAM ACHTERNAAM\"\n&gt; git config --global user.email \"VOORNAAM.ACHTERNAAM@student.hogent.be\"\n&gt; git config --global push.default simple\n&gt; git config --global core.autocrlf true   # &lt;- Windows\n&gt; git config --global core.autocrlf input  # &lt;- macOS/Linux\n&gt; git config --global init.defaultBranch main\n&gt; git config --global pull.rebase true\n&gt; git config --global rebase.autoStash true\n&gt; git config --global core.ignorecase false\n</code></pre>"},{"location":"merge-rebase/","title":"Merge vs rebase","text":"<p>Wanneer je met meerdere personen samenwerkt aan dezelfde codebase, zul je de wijzigingen van anderen moeten integreren in je eigen werk. Meestal worden hiervoor zogenaamde \"merge commits\" gebruikt. Het probleem hiermee is dat hierdoor de historiek van de repository dan al snel ingewikkeld wordt. Een alternatief is om jouw werk te \"rebasen\" op de wijzigingen van anderen. Dit zorgt voor een veel eenvoudigere historiek, maar vraagt een zekere discipline.</p> <p>Hieronder tonen we het verschil en hoe je een rebase uitvoert.</p>"},{"location":"merge-rebase/#merge","title":"Merge","text":"<p>Stel, Alice en Bob werken samen aan een project, en hebben elk een kloon gemaakt van de branch <code>main</code> op de GitHub-repository van hun team.</p> <pre><code>gitGraph\n    commit id: \"m1-c055049\"\n    commit id: \"m2-7b1b3f4\"</code></pre> <p>De commit-id's kan je als volgt interpreteren: <code>m1</code> en <code>m2</code> duiden de volgorde aan van deze commits op de <code>main</code> branch. De hexadecimale string stelt de hash voor van deze commit. Hieronder duiden we de commits van Alice aan met <code>a1</code> en <code>a2</code>, en die van Bob met <code>b1</code> en <code>b2</code>, eveneens gevolgd door een (fictieve) hash.</p> <p>Alice heeft lokaal enkele nieuwe commits gemaakt. Zowel Alice als Bob werken gewoon op de <code>main</code> branch, dus aparte branches nemen we hier zelfs niet in rekening.</p> <pre><code>gitGraph\n    commit id: \"m1-c055049\"\n    commit id: \"m2-7b1b3f4\"\n    branch alice\n        commit id: \"a1-0bad10f\"\n        commit id: \"a2-3b1b3f4\"</code></pre> <p>Intussen is ook Bob wijzigingen aan het maken:</p> <pre><code>gitGraph\n    commit id: \"m1-c055049\"\n    commit id: \"m2-7b1b3f4\"\n    branch bob\n        commit id: \"b1-84ea106\"\n        commit id: \"b2-a8ba556\"</code></pre> <p>Alice is de eerste die naar Git gepushed heeft, dus voor Bob is de situatie nu als volgt:</p> <pre><code>gitGraph\n    commit id: \"m1-c055049\"\n    commit id: \"m2-7b1b3f4\"\n    branch bob\n        commit id: \"b1-84ea106\"\n        commit id: \"b2-a8ba556\"\n    checkout main\n    commit id: \"a1-0bad10f\"\n    commit id: \"a2-3b1b3f4\"</code></pre> <p>Als Bob een push naar GitHub wil doen, zal deze uiteraard geweigerd worden. Hij moet eerst de commits van Alice integreren in zijn lokale kopie. Bij een <code>git pull</code> zal Git een merge commit maken, d.w.z. een commit die de wijzigingen van Alice en Bob samenbrengt:</p> <pre><code>gitGraph\n    commit id: \"m1-c055049\"\n    commit id: \"m2-7b1b3f4\"\n    branch bob\n        commit id: \"b1-84ea106\"\n        commit id: \"b2-a8ba556\"\n    checkout main\n    commit id: \"a1-0bad10f\"\n    commit id: \"a2-3b1b3f4\"\n    checkout bob\n    merge main id: \"b3-0bad108\"</code></pre> <p>Na het eventueel oplossen van merge-conflicten kan Bob nu zijn werk naar GitHub pushen, maar de historiek is nu wel wat ingewikkeld. Wanneer je ook met meerdere mensen samenwerkt (die bv. ook nog eens andere combinaties van commits moeten mergen), kan dit al snel onoverzichtelijk worden.</p>"},{"location":"merge-rebase/#rebase","title":"Rebase","text":"<p>Een alternatief is dat Bob eerst de commits van Alice binnen haalt, en dan zijn eigen commits achteraan in de historiek toevoegt. Dit heet een rebase.</p> <pre><code>gitGraph\n    commit id: \"m1-c055049\"\n    commit id: \"m2-7b1b3f4\"\n    commit id: \"a1-0bad10f\"\n    commit id: \"a2-3b1b3f4\"\n    branch bob\n        commit id: \"b1-b47ca47\"\n        commit id: \"b2-a1069a3\"</code></pre> <p>Merk op dat de commit hashes van Bob nu veranderd zijn omdat de commits van Alice er nu voor staan. Dit is normaal bij een rebase. Bob kan nu zijn werk naar GitHub pushen, en de historiek is veel eenvoudiger:</p> <pre><code>gitGraph\n    commit id: \"m1-c055049\"\n    commit id: \"m2-7b1b3f4\"\n    commit id: \"a1-0bad10f\"\n    commit id: \"a2-3b1b3f4\"\n    commit id: \"b1-b47ca47\"\n    commit id: \"b2-a1069a3\"</code></pre> <p>Als elk teamlid deze manier van werken aanhoudt, blijft de historiek een stuk eenvoudiger om over te redeneren. Het principe is dus dat je de bestaande historiek niet wijzigt, en je eigen commits altijd achteraan toevoegt.</p>"},{"location":"merge-rebase/#aanbeveling","title":"Aanbeveling","text":"<p>Telkens wanneer je een <code>git pull</code> uitvoert, is het best dat je de optie <code>--rebase</code> meegeeft. Dit zorgt ervoor dat Git automatisch een rebase uitvoert in plaats van een merge.</p> <p>Je kan Git zo instellen dat wanneer je een <code>git pull</code> uitvoert, Git automatisch een rebase doet in plaats van een merge. Dit doe je met de volgende commando's:</p> <pre><code>&gt; git config --global pull.rebase true\n&gt; git config --global rebase.autoStash true\n</code></pre> <p>De eerste regel zorgt ervoor dat Git standaard een rebase doet bij een pull, de tweede regel zorgt ervoor dat Git automatisch je eventuele lokale wijzigingen opzij zet en terug toepast na de rebase.</p>"},{"location":"readonly-repo/","title":"Read-only gebruik van een repository","text":"<p>Als je enkel de inhoud van een repository wil bijhouden op je pc, dan kan je de repository clonen. Dit betekent dat je een lokale kopie maakt van de repository, inclusief de volledige historiek. Je kan dan de inhoud van de repository bekijken, maar je kan geen wijzigingen aanbrengen en je kan de wijzigingen van anderen niet pushen naar de repository. Sommige vakken zullen cursusmateriaal op deze manier ter beschikking stellen.</p> <p>Ga naar de repository op GitHub via de link die je van de lectoren hebt gekregen. Klik op de groene knop \"Code\". Je vindt hier verschillende manieren om de repository te downloaden naar je eigen pc.</p> <p></p> <ul> <li>Met download ZIP haal je de laatste revisie van de code binnen als een zip-bestand. Je hebt echter geen historiek en kan latere wijzigingen aand e code op GitHub niet makkelijk bijhouden.</li> <li>De HTTPS-link kan je gebruiken om de repository lokaal te klonen (d.w.z. een kopie downloaden met de volledige historiek). Hiermee heb je enkel leestoegang tot de repository. Kopieer de URL in het tekstveld.</li> <li>De SSH-link zal je later leren gebruiken om ook schrijftoegang te krijgen tot een GitHub-repository.</li> <li>GitHub CLI en GitHub Desktop zijn optionele tools om repositories te beheren, maar hier gaan we niet verder op in.</li> </ul> <p>Open een terminal en navigeer naar de map waar je de repository wil clonen. Voer het volgende commando uit (maar dan met de URL die je daarnet gekopieerd hebt):</p> <pre><code>&gt; git clone https://github.com/USERNAME/REPOSITORY.git\n</code></pre> <p>Er wordt nu een nieuwe subdirectory aangemaakt met daarin de laatste toestand van de code zoals die nu ook op GitHub te zien is.</p> <p>Als de code op de repository is aangepast, kan je de lokale kopie updaten met de laatste wijzigingen. Ga naar de map van de repository en voer het volgende commando uit:</p> <pre><code>&gt; cd REPOSITORY\n&gt; git pull\n</code></pre> <p>Let op: in deze opstelling is het niet de bedoeling dat je wijzigingen aanbrengt aan de code in de repository. Kopieer bestanden die je wilt wijzigen naar een andere directory buiten de repository.</p>"},{"location":"repo-clonen/","title":"Repository clonen","text":"<p>De eerste stap om bij te dragen aan een project is het clonen van de repository. Dit betekent dat je een lokale kopie van de codebase maakt op je eigen machine. Dit is handig omdat je dan lokaal wijzigingen kunt aanbrengen en deze later kan pushen naar de remote repository.</p> <p>Om een repository te clonen, navigeer je naar de repository op GitHub en klik je op de groene knop \"Code\". Hier krijg je de optie om de URL van de repository te kopi\u00ebren. Kies hier voor de SSH-optie en kopieer de URL.</p> <p></p> <p>Open een terminal en navigeer naar de map waar je de repository wil clonen. Voer het volgende commando uit (maar dan met de URL die je daarnet gekopieerd hebt):</p> <pre><code>&gt; git clone git@github.com:USERNAME/REPOSITORY.git\n</code></pre> <p>Er wordt nu een nieuwe subdirectory aangemaakt met daarin de laatste toestand van de code zoals die nu ook op GitHub te zien is.</p>"},{"location":"ssh-sleutel-instellen/","title":"SSH-sleutel instellen","text":"<p>Als je met meerdere personen samenwerkt aan een project, dan zal je de code in een repository willen bewaren. In dat geval moet je schrijfrechten hebben op die repository. Hiervoor moet je aangemeld zijn in de GitHub CLI.</p> <p>Bij voorkeur gebruik je hiervoor authenticatie op basis van een SSH-sleutel. Hiervoor moet je een SSH-sleutel genereren en de publieke sleutel toevoegen aan je GitHub-account. Volg hiervoor de volgende tutorials:</p> <ul> <li>Generating a new SSH key and adding it to the ssh-agent<ul> <li>Mocht je reeds een SSH-sleutel hebben in de map <code>~/.ssh/</code> (<code>~</code> is de home-directory van jouw gebruiker), dan kan je deze hergebruiken.</li> <li>Je kan ook aparte SSH-sleutel genereren voor verschillende accounts of repositories.</li> </ul> </li> <li>Adding a new SSH key to your GitHub account</li> <li>Testing your SSH connection</li> </ul>"},{"location":"wijzigingen-binnenhalen/","title":"Wijzigingen binnenhalen","text":"<p>Als je een repository hebt gecloned, is dat maar een simpele kopie van de repository op dat moment. Jouw lokale kopie is wel gelinkt aan de originele repository via een zogenaamde remote.</p> <p>Je kan de remote van je repository bekijken met het commando <code>git remote -v</code>. Dit toont je de URL van de remote repository.</p> <p>Als er wijzigingen zijn in de originele repository, moet je die zelf binnenhalen. Dit kan op twee manieren: <code>git fetch</code> en <code>git pull</code>. Beide halen wijzigingen op van een externe repository, maar ze doen dat op een andere manier.</p>"},{"location":"wijzigingen-binnenhalen/#git-fetch","title":"<code>git fetch</code>","text":"<p>Het <code>git fetch</code> commando haalt wijzigingen op van een externe repository, zoals GitHub, maar voert deze niet automatisch samen met je lokale code. Dit betekent dat de wijzigingen van de externe repository alleen worden opgehaald en naar een lokale referentie worden gebracht. Je lokale repository is dus wel op de hoogte van de wijzigingen maar ze zijn niet uitgevoerd.</p> <p>Na het uitvoeren van <code>git fetch</code> kan je bekijken wat het volgende uit te voeren commando is via <code>git status</code>. Dit commando is je beste vriend en zal altijd helpen om te zien wat er moet gebeuren.</p>"},{"location":"wijzigingen-binnenhalen/#git-pull","title":"<code>git pull</code>","text":"<p>Het <code>git pull</code> commando haalt ook wijzigingen op van een externe repository, maar voert deze wel automatisch samen met je lokale code.</p> <p>Dit kan ervoor zorgen dat je conflicten krijgt als er wijzigingen zijn in de externe repository die niet compatibel zijn met jouw lokale wijzigingen. Daarom is het veiliger om <code>git pull --rebase</code> te gebruiken, wat dit precies doet, lees je in de merge vs rebase sectie.</p>"},{"location":"wijzigingen-binnenhalen/#samenvatting","title":"Samenvatting","text":"<p>Het is altijd beter om eerst <code>git fetch</code> uit te voeren en te bekijken wat er veranderd is, via bv. <code>git status</code>. Daarna kan je eventueel <code>git pull</code> doen om de wijzigingen samen te voegen met je lokale code.</p>"}]}